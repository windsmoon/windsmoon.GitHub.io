<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windsmoon 的游戏相关</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.windsmoon.com/"/>
  <updated>2017-10-11T16:06:28.000Z</updated>
  <id>http://www.windsmoon.com/</id>
  
  <author>
    <name>windsmoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断单向链表是否有环及求环入口的算法数学证明</title>
    <link href="http://www.windsmoon.com/2017/10/09/%E5%88%A4%E6%96%AD%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%E5%8F%8A%E6%B1%82%E7%8E%AF%E5%85%A5%E5%8F%A3%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/"/>
    <id>http://www.windsmoon.com/2017/10/09/判断单向链表是否有环及求环入口的算法数学证明/</id>
    <published>2017-10-08T16:11:12.000Z</published>
    <updated>2017-10-11T16:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>读者您好：本篇文章未经作者本人授权，禁止任何形式的转载，谢谢！</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本篇文章，主要讲解 title 中所描述算法的原理及数学证明。需要注意的是，本篇中出现的代码未必是完整代码，可能只是一个关键代码块，且采用 C++ 编写。</p><a id="more"></a><h2 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h2><p>当单向链表中存在环的时候，遍历此链表会发生无限循环，无法到达末尾（实际上并没有末尾）的情况，所以在可能发生这种情况的时候，需要检查链表中是否存在一个环。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法很简单，设置两个指针，分别为快指针（fast）和慢指针（slow），快指针每次向前走两步，慢指针每次走一步。如果快指针指向了 NULL，那么说明此链表中没有坏，因为有环会发生无限循环，不可能走到末尾。而在有环的情况下，两个指针会在环里绕圈，最终指向同一个地址，即两个指针相遇，根据这个就可以终止遍历代码且证实链表有环。</p><p>附上关键代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ListNode *slow = head-&gt;next;</div><div class="line">ListNode *fast = slow-&gt;next;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (fast &amp;&amp; slow != fast)</div><div class="line">&#123;</div><div class="line">    slow = slow-&gt;next;</div><div class="line">    fast = fast-&gt;next ? fast-&gt;next-&gt;next : <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> fast ? <span class="literal">true</span> : <span class="literal">false</span>;</div></pre></td></tr></table></figure><h3 id="有环时两个指针一定会相遇的数学证明"><a href="#有环时两个指针一定会相遇的数学证明" class="headerlink" title="有环时两个指针一定会相遇的数学证明"></a>有环时两个指针一定会相遇的数学证明</h3><p>在做这道题的时候可能会有疑惑：为什么在有环的时候两个指针一定会相遇？这里给出数学证明。</p><p><strong>当 slow 指针一步步走到环的入口时</strong>（注意此时 fast 已经在环里了，因为它比 slow 要快），设：</p><ul><li>链表头指针 head 到链表环的入口处的距离为 $ L_1 $</li><li>fast 指针距离环的入口的距离为 $ L_2 $</li><li>fast 已经在环内走了 $ N_1 $ 圈</li><li>slow 再经过 $ i $ 步与 fast 相遇</li><li>相遇时 slow 又经过了 $ N_2 $ 圈</li><li>环的周长为 $ C $</li><li>fast 和 slow 走过的总路程分别为 $ disFast $ 和 $ disSlow $ </li></ul><p>示意图如下：</p><p><img src="http://oxm0iiq5n.bkt.clouddn.com/WX20171010-230814@2x.png" alt="示意图"></p><p>则当 slow 走到环入口时，可得知：</p><script type="math/tex; mode=display">    disFast = L_1 + L_2 + N_1C</script><script type="math/tex; mode=display">    disSlow = L_1</script><p>又因为 fast 每次走两步，即比 slow 快一倍，所以有：</p><script type="math/tex; mode=display">    (disSlow + i - L_1) \; mod \; C = (disFast + 2i - L_1) \; mod \; C</script><p>减去 $ L_1 $ 是为了减掉不在环内的长度从而求得相遇点相对于环入口的距离，然后有</p><script type="math/tex; mode=display">    i \; mod \; C = (L_2 + N_1C + 2i) \; mod \; C</script><script type="math/tex; mode=display">    \Rightarrow (L_2 + N_1C + i) \; mod \; C = 0</script><p>此时可以得到，如果两个指针相遇，那么</p><script type="math/tex; mode=display">    L_2 + N_1C + i</script><p>要么等于 $ 0 $ (显然不可能)，要么等于 $ C * N_x $ 。而因为此时相遇了，所以 $ N_x $ 就等于 slow 走过的圈数 $ N_2 $ （可以向上查看此变量代表的意义）。所以：</p><script type="math/tex; mode=display">    L_2 + N_1C + i = N_2C</script><script type="math/tex; mode=display">    \Rightarrow i = (N_2 - N_1)C - L_2</script><p>$ i $ 显然可以是个合法的数字，所以自然是可以相遇的，而我们也求出了在 slow 到达环的入口时，再走多少步，即可相遇。其实不难看出，$ N_2 $ 可以有无限个值，想象一下，在一个环中，两个人相遇，其中一个人以另一个人的 $ 2 $ 倍的速度前进，那么当慢的那个人每走完半圈后，快的那个人正好也走完一圈，当慢的人每走完一圈回到相遇点后，快的那个也正好也走完了两圈，也是回到了相遇点。</p><p>这就是对于在有环的单链表中快慢指针一定会相遇的数学证明。</p><h2 id="求环的入口"><a href="#求环的入口" class="headerlink" title="求环的入口"></a>求环的入口</h2><p>在上一个问题之后，还有一个相关的问题，即如果此链表有环，求环的入口节点。直接想此算法可能比较难解，所以这个问题可以尝试着从数学上入手。</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>设(注意与上一个问题所表示的含义可能有不同)：</p><ul><li>$ L_1 $ 为链表头 head 到环入口的距离</li><li>$ L_2 $ 为从环入口向前到相遇点的距离</li><li>$ L_3 $ 为从相遇点向前到环入口的距离</li><li>$ C $ 为环的周长</li><li>$ N_1 $ 和 $ N_2 $ 分别为 slow 和 fast 在相遇时走过的圈数</li><li>$ disSlow $ 和 $ disFast $ 分别为 slow 和 fast 在相遇时走过的圈数</li></ul><p>示意图如下：</p><p><img src="http://oxm0iiq5n.bkt.clouddn.com/WX20171011-232140@2x.png" alt="示意图"></p><p>则：</p><script type="math/tex; mode=display">    disSlow = L_1 + L_2 + N_1C</script><script type="math/tex; mode=display">    disFast = L_1 + L_2 + N_2C</script><p>又因为 fast 速度是 slow 的 $ 2 $ 倍，所以：</p><script type="math/tex; mode=display">    disSlow * 2 = disFast</script><script type="math/tex; mode=display">    \Rightarrow 2(L_1 + L_2 + N_1C) = L_1 + L_2 + N_2C</script><script type="math/tex; mode=display">    \Rightarrow L_1 + L_2 + 2N_1C = N_2C</script><script type="math/tex; mode=display">    \Rightarrow L_1 = (N_2 - 2N_1)C - L_2</script><p>由此可以看出，$ L_1 $ 即链表头 head 到环入口的距离就等于换的周长的整数倍减去 $ L_2 $，其实就等于 $ L_3 $ 加上周长 $ C $ 的整数倍，而从相遇点向前走环周长的整数倍再加上 $ L_3 $ 的距离，正好就走到了环的入口，所以我们就可以推导出算法，即：让两个指针其中一个从链表头 head 出发，一次走一步，让另一个指针从相遇点出发，也一次走一步，相遇点就是环的入口。</p><h3 id="数学-1"><a href="#数学-1" class="headerlink" title="数学"></a>数学</h3><p>关键代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">slow = head;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (slow != fast)</div><div class="line">&#123;</div><div class="line">    slow = slow-&gt;next;</div><div class="line">    fast = fast-&gt;next;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>这里有一个小坑，在算法的最最开始，可以让 slow 和 fast 都为 head 指针，或者 slow 为 head 的下一个节点，fast 为下两个节点。如果让 slow 为 head 指针，fast 为下一个节点，则可能无法求出环的入口，甚至可能陷入死循环。但对于第一个问题，这个步骤没有影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读者您好：本篇文章未经作者本人授权，禁止任何形式的转载，谢谢！&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;本篇文章，主要讲解 title 中所描述算法的原理及数学证明。需要注意的是，本篇中出现的代码未必是完整代码，可能只是一个关键代码块，且采用 C++ 编写。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.windsmoon.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法 链表 数学" scheme="http://www.windsmoon.com/tags/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8-%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
