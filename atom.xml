<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windsmoon 的游戏相关</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-10T14:50:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>windsmoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>判断单向链表是否有环及求环入口的算法数学证明</title>
    <link href="http://yoursite.com/2017/10/09/%E5%88%A4%E6%96%AD%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%E5%8F%8A%E6%B1%82%E7%8E%AF%E5%85%A5%E5%8F%A3%E7%9A%84%E7%AE%97%E6%B3%95%E6%95%B0%E5%AD%A6%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2017/10/09/判断单向链表是否有环及求环入口的算法数学证明/</id>
    <published>2017-10-08T16:11:12.000Z</published>
    <updated>2017-10-10T14:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本篇文章，是此博客的第一篇正式文章，主要讲解 title 中所描述算法的原理及数学证明。需要注意的是，本篇中出现的代码未必是完整代码，可能只是一个关键代码块，且采用 C++ 编写。</p><a id="more"></a><h2 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h2><p>以下题目均出自 leetcode</p><ul><li><a href="https://leetcode.com/problems/linked-list-cycle/description/" title="Linked List Cycle" target="_blank" rel="external">Linked List Cycle (判断是否有环，题号 141)</a></li><li><a href="https://leetcode.com/problems/linked-list-cycle-ii/description/" title="Linked List Cycle II" target="_blank" rel="external">Linked List Cycle II (求环的入口，题号 142)</a></li></ul><h2 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h2><h3 id="为什么要判断"><a href="#为什么要判断" class="headerlink" title="为什么要判断"></a>为什么要判断</h3><p>当单向链表中存在环的时候，遍历此链表会发生无限循环，无法到达末尾（实际上并没有末尾）的情况，所以在可能发生这种情况的时候，需要检查链表中是否存在一个环。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法很简单，设置两个指针，分别为快指针（fast）和慢指针（slow），快指针每次向前走两步，慢指针每次走一步。如果快指针指向了 NULL，那么说明此链表中没有坏，因为有环会发生无限循环，不可能走到末尾。而在有环的情况下，两个指针会在环里绕圈，最终指向同一个地址，即两个指针相遇，根据这个就可以终止遍历代码且证实链表有环。</p><p>附上关键代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ListNode *slow = head-&gt;next;</div><div class="line">ListNode *fast = slow-&gt;next;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (fast &amp;&amp; slow != fast)</div><div class="line">&#123;</div><div class="line">    slow = slow-&gt;next;</div><div class="line">    fast = fast-&gt;next ? fast-&gt;next-&gt;next : <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> fast ? <span class="literal">true</span> : <span class="literal">false</span>;</div></pre></td></tr></table></figure><h3 id="环时两个指针一定会相遇的数学证明有"><a href="#环时两个指针一定会相遇的数学证明有" class="headerlink" title="环时两个指针一定会相遇的数学证明有"></a>环时两个指针一定会相遇的数学证明有</h3><p>在做这道题的时候可能会有疑惑：为什么在有环的时候两个指针一定会相遇？这里给出数学证明。</p><p><strong>当 slow 指针一步步走到环的入口时</strong>（注意此时 fast 已经在环里了，因为它比 slow 要快），设：</p><ul><li>链表头指针 head 到链表环的入口处的距离为 $ L_1 $</li><li>fast 指针距离环的入口的距离为 $ L_2 $</li><li>fast 已经在环内走了 $ N_1 $ 圈</li><li>slow 再经过 $ i $ 步与 fast 相遇</li><li>相遇时 slow 又经过了 $ N_2 $ 圈</li><li>环的周长为 $ C $</li><li>fast 和 slow 走过的总路程分别为 $ disFast $ 和 $ disSlow $ </li></ul><p>则当 slow 走到环入口时，可得知：</p><script type="math/tex; mode=display">    disFast = L_1 + L_2 + C * N_1</script><script type="math/tex; mode=display">    disSlow = L_1</script><p>又因为 fast 每次走两步，即比 slow 快一倍，所以有：</p><script type="math/tex; mode=display">    (disSlow + i) mod C = (disFast + i * 2)</script><script type="math/tex; mode=display">    \Rightarrow (L_1 + i) mod C = (L_1 + L_2 + C * N_1 + i * 2) mod C</script><script type="math/tex; mode=display">    \Rightarrow (L_2 + C * N_1 + i) mod C = 0</script><p>此时可以得到，如果两个指针相遇，那么</p><script type="math/tex; mode=display">    L_2 + C * N_1 + i</script><p>要么等于 $ 0 $ (显然不可能)，要么等于 $ C * N_x $ 。而因为此时相遇了，所以 $ N_x $ 就等于 slow 走过的圈数 $ N_2 $ （可以向上查看此变量代表的意义）。所以：</p><script type="math/tex; mode=display">    L_2 + C * N_1 + i = C * N_2</script><script type="math/tex; mode=display">    \Rightarrow i = (N_2 - N_1) * C - L_2</script><p>$ i $ 显然可以是个合法的数字，所以自然是可以相遇的，而我们也求出了在 slow 到达环的入口时，再走多少步，即可相遇。其实不难看出，$ N_2 $ 可以有无限个值，想象一下，在一个环中，两个人相遇，其中一个人以另一个人的 $ 2 $ 倍的速度前进，那么当慢的那个人每走完半圈后，快的那个人正好也走完一圈，当慢的人每走完一圈回到相遇点后，快的那个也正好也走完了两圈，也是回到了相遇点。</p><p>这就是对于在有环的单链表中快慢指针一定会相遇的数学证明。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;本篇文章，是此博客的第一篇正式文章，主要讲解 title 中所描述算法的原理及数学证明。需要注意的是，本篇中出现的代码未必是完整代码，可能只是一个关键代码块，且采用 C++ 编写。&lt;/p&gt;
    
    </summary>
    
      <category term="链表" scheme="http://yoursite.com/categories/%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Linked List， 算法" scheme="http://yoursite.com/tags/Linked-List%EF%BC%8C-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/08/hello-world/"/>
    <id>http://yoursite.com/2017/10/08/hello-world/</id>
    <published>2017-10-08T11:00:11.000Z</published>
    <updated>2017-10-08T11:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
